{
    /* Specifies the level of log output verbosity. Anything more severy than the level specified
       will also be logged. */
    /* 指定日志输出的详细程度的级别。以外的任何指定的级别更塞弗里也将被记录。 */
    "logLevel": "debug", //or "warning", "error"
    "logColors": true,

    /* The NOMP CLI (command-line interface) will listen for commands on this port. For example,
       blocknotify messages are sent to NOMP through this. */
    /* 该 NOMP CLI（命令行接口）将监听此端口上命令。例如，
       块通知消息通过此发送到 NOMP。*/
    "cliPort": 17117,

    /* By default 'forks' is set to "auto" which will spawn one process/fork/worker for each CPU
       core in your system. Each of these workers will run a separate instance of your pool(s),
       and the kernel will load balance miners using these forks. Optionally, the 'forks' field
       can be a number for how many forks will be spawned. */
    /* 默认情况下 '叉' 设置为 “自动”，这将产生一个 进程/叉/矿工为每个CPU核心系统。
       这些矿工将运行你的矿池的一个单独的实例，
       和内核将使用加载这些 叉 平衡矿工。可选的，'叉'字段
       可以是一个数字的多少 叉 将被催生。*/
    "clustering": {
        "enabled": true,
        "forks": "auto"
    },

/* Pool config file will inherit these default values if they are not set. */
/*如果他们不设置池的配置文件将继承这些默认值。 */
    "defaultPoolConfigs": {
/* Poll RPC daemons for new blocks every this many milliseconds. */
/* 轮询RPC守护程序为新的每块这么多毫秒。 */
        "blockRefreshInterval": 1000,
/* If no new blocks are available for this many seconds update and rebroadcast job. */
/* 如果没有新的块可用于多少秒更新和转播工作。 */
        "jobRebroadcastTimeout": 55,
/* Disconnect workers that haven't submitted shares for this many seconds. */
/* 没有提交股如此多秒数断开工人。 */
        "connectionTimeout": 600,
/* (For MPOS mode) Store the block hashes for shares that aren't block candidates. */
/* （对于MPOS模式）存储块哈希股份未阻止候选人。 */
        "emitInvalidBlockHashes": false,
/* This option will only authenticate miners using an address or mining key. */
/* 使用地址或采矿键，此选项只会验证矿工。 */
        "validateWorkerUsername": true,
/* Enable for client IP addresses to be detected when using a load balancer with TCP
           proxy protocol enabled, such as HAProxy with 'send-proxy' param:
           http://haproxy.1wt.eu/download/1.5/doc/configuration.txt */
/* 启用使用一个TCP负载平衡器时被检测到客户端的IP地址代理协议启用，比如HAProxy的用'发送代理'参数：
           http://haproxy.1wt.eu/download/1.5/doc/configuration.txt */
        "tcpProxyProtocol": false,
        /* If under low-diff share attack we can ban their IP to reduce system/network load. If
           running behind HAProxy be sure to enable 'tcpProxyProtocol', otherwise you'll end up
           banning your own IP address (and therefore all workers). */
/* 如果在低差异份额攻击，我们可以禁止其IP ，以降低系统/网络负载。如果运行背后HAProxy的一定要启用“ tcpProxyProtocol '，否则你会最终
           禁止自己的IP地址（因此所有工人） 。 */
        "banning": {
            "enabled": true,
            "time": 600, //How many seconds to ban worker for多少秒，禁止工作者
            "invalidPercent": 50, //What percent of invalid shares triggers ban什么％的股份无效，禁止触发
            "checkThreshold": 500, //Perform check when this many shares have been submitted已提交这么多的股份时，已执行检查
            "purgeInterval": 300 //Every this many seconds clear out the list of old bans每多少秒清除旧的禁令名单
        },
/* Used for storing share and block submission data and payment processing. */
/* 用于存储共享和阻止提交数据和支付处理。 */
        "redis": {
            "host": "127.0.0.1",
            "port": 6379
        }
    },

    /* This is the front-end. Its not finished. When it is finished, this comment will say so. */
    /* 这是前端。还没开发完成。完成后再修改解释。 */
    "website": {
        "enabled": false,//or "true"
        "host": "0.0.0.0",
        "port": 80,
        /* Used for displaying stratum connection data on the Getting Started page. */
        /* 用于入门页面上显示挖矿连接数据。 */
        "stratumHost": "cryppit.com",// or localhost
        "stats": {
            /* Gather stats to broadcast to page viewers and store in redis for historical stats
               every this many seconds. */
            /* 统计收集到广播到页面观众和存储在 Redis 的历史统计，每隔多少秒。 */
            "updateInterval": 60,
            /* How many seconds to hold onto historical stats. Currently set to 24 hours. */
            /* 多少秒守住历史统计。目前设置为24小时。 */
            "historicalRetention": 43200,
            /* How many seconds worth of shares should be gathered to generate hashrate. */
            /* 多少秒钟的股份应聚集产生哈希。 */
            "hashrateWindow": 300
        },
        /* Not done yet. */
        /* 尚未完成。 */
        "adminCenter": {
            "enabled": true,
            "password": "password"
        }
    },

    /* Redis instance of where to store global portal data such as historical stats, proxy states,
       ect.. */
    /* 在哪里存储全球门户的数据，如历史统计，代理状态的Redis实例，
       等.. */
    "redis": {
        "host": "127.0.0.1",
        "port": 6379
    },

    /* With this switching configuration, you can setup ports that accept miners for work based on
       a specific algorithm instead of a specific coin. Miners that connect to these ports are
       automatically switched a coin determined by the server. The default coin is the first
       configured pool for each algorithm and coin switching can be triggered using the
       cli.js script in the scripts folder.

       Miners connecting to these switching ports must use their public key in the format of
       RIPEMD160(SHA256(public-key)). An address for each type of coin is derived from the miner's
       public key, and payments are sent to that address. */
    /* 使用此开关配置，可以设置端口，接受基于特定算法，而不是一个特定的币工作的矿工。
       连接到这些端口矿工自动切换由服务器决定的硬币。默认的硬币是每个算法和投币开关配置的第一个矿池可以使用脚本文件夹中的 cli.js 脚本被触发。
       连接到这些交换端口矿工必须使用自己的公钥 RIPEMD160（SHA256（公钥））的格式。地址为每种类型的硬币是从矿工的公钥导出，付款发送到该地址。*/
    /* 关于机枪开关！！！！！！
       简单来说，这个机枪开关是可以全开的，原理是，放出某一种算法的一个挖矿的统一端口，该算法下的币挖矿端口还是
       不变，用户连接这个统一挖矿端口，然后NOMP把算力重新定义到机枪池子内的某一种币的端口上去，从而达到挖矿效果。
       至于切换的命令，还需要找资料~~~
       理论上来说，所有机枪的开关，可以一起开，但是端口必须区分开来，而用户也只能选择某一种算法
    */
    "switching": {
        "switch1": {
            "enabled": false,//false true
            "algorithm": "sha256",
            "ports": {
                "3333": {
                    "diff": 10,
                    "varDiff": {
                        "minDiff": 16,
                        "maxDiff": 512,
                        "targetTime": 15,
                        "retargetTime": 90,
                        "variancePercent": 30
                    }
                }
            }
        },
        "switch2": {
            "enabled": false,//false true
            "algorithm": "scrypt",
            "ports": {
                "4444": {
                    "diff": 10,
                    "varDiff": {
                        "minDiff": 16,
                        "maxDiff": 512,
                        "targetTime": 15,
                        "retargetTime": 90,
                        "variancePercent": 30
                    }
                }
            }
        },
        "switch3": {
            "enabled": false,//false true 命令为 node scripts/cli.js coinswitch limecoin switch3
            "algorithm": "x11",
            "ports": {
                "5555": {
                    "diff": 0.00116,
                    "varDiff": {
                        "minDiff": 0.00116,//0.001 0.00116 0.004 0.008 0.0001
                        "maxDiff": 0.10,//0.08 0.10
                        "targetTime": 15,
                        "retargetTime": 120,//90 nomp 120 st
                        "variancePercent": 30
                    }
                }
            }
        }
    },
/* 貌似是是否开启自动支持的交易市场最新收益而进行自动切换 */
    "profitSwitch": {
        "enabled": false,
        "updateInterval": 600,
        "depth": 0.90,
        "usePoloniex": true,
        "useCryptsy": true,
        "useMintpal": true
    }
}
